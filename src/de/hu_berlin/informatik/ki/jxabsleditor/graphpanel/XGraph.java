/*
 * 
 */

/*
 * Graph.java
 *
 * Created on 08.01.2009, 17:20:41
 */
package de.hu_berlin.informatik.ki.jxabsleditor.graphpanel;

import att.grappa.Graph;
import att.grappa.GrappaAdapter;
import att.grappa.GrappaListener;
import att.grappa.GrappaPanel;
import att.grappa.GrappaSupport;
import att.grappa.Parser;
import java.io.InputStream;

/**
 *
 * @author Heinrich Mellmann
 */
public class XGraph extends javax.swing.JPanel
{

    private String layoutEngine = null;
    private GrappaListener listener = null;

  /** Creates new form Graph */
  public XGraph()
  {
    initComponents();

    importGraphFromString("graph \"ER\" {node [	label = \"N\", shape = box ];" +
      "course [pos=\"122,206\", width=\"0.75\", height=\"0.50\", tip=\"some course or other\"]" +
      "}");

  //System.err.println("The graph contains " + graph.countOfElements(Grappa.NODE|Grappa.EDGE|Grappa.SUBGRAPH) + " elements.");
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(100, 200));
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


  public void importGraphFromString(String str)
  {
    InputStream is = new StringInputStream(str);


    Parser parser = new Parser(is, System.err);

    try
    {
      parser.parse();
    }
    catch(Exception e)
    {
      e.printStackTrace();
    }

    Graph graph = parser.getGraph();
    GrappaPanel graphPanel = new GrappaPanel(graph);
    graphPanel.addGrappaListener(new GrappaAdapter());


    graphPanel.addGrappaListener(listener);

    /*************************
     * do layout using dot
     ************************/
    try{
        if(layoutEngine != null)
        {
            Object connector = Runtime.getRuntime().exec(layoutEngine);
            GrappaSupport.filterGraph(graph, connector);
        }
    }catch(Exception e)
    {
        this.layoutEngine = null;
        e.printStackTrace();
    }

    this.removeAll();
    this.add(graphPanel);

    this.revalidate();
  }//end importGraphFromString

    public void setLayoutEngine(String layoutEngine) {
        this.layoutEngine = layoutEngine;
    }

    public void setListener(GrappaListener listener) {
        this.listener = listener;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
