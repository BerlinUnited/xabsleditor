/*
 * DynamicCanvasPanel.java
 *
 * Created on 8. August 2008, 18:43
 */

package de.hu_berlin.informatik.ki.jxabsleditor.graphpanel;

import att.grappa.Graph;
import att.grappa.GrappaPanel;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.geom.AffineTransform;

/**
 *
 * @author  Heinrich Mellmann
 */
public class DynamicXGraph extends GrappaPanel implements MouseMotionListener, MouseListener, MouseWheelListener
{
    private double offsetX;
    private double offsetY;
    private double scale;

    private double dragOffsetX;
    private double dragOffsetY;


    /** Creates new form DynamicCanvasPanel */
    public DynamicXGraph(Graph graph) {
        super(graph);
        initComponents();

        this.addMouseMotionListener(this);
        this.addMouseListener(this);
        this.addMouseWheelListener(this);
        this.setOpaque(true);

        this.offsetX = 0.0;
        this.offsetY = 0.0;
        this.scale = 1.0;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>


    // Variables declaration - do not modify
    // End of variables declaration


    @Override
    public synchronized void paintComponent(Graphics g)
    {
        Graphics2D g2d = (Graphics2D)g;
        //g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        //g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

        // transform the coordinate system to the mathematical one ;)
        //g2d.setTransform(new AffineTransform(scale,0,0,scale,offsetX, offsetY));
        
        g2d.translate(offsetX, offsetY);
        g2d.transform(new AffineTransform(1,0,0,1,0,0));
        g2d.scale(scale, scale);

        super.paintComponent(g);

        // transform the drawing-pane back (nessesary to draw the other components corect)
        g2d.transform(new AffineTransform(1,0,0,1,0,0));
        g2d.translate(-offsetX, -offsetY);
    }//end paintComponent


    // <editor-fold defaultstate="collapsed" desc="Handling Mouse Events">
    public void mouseWheelMoved(MouseWheelEvent e) {
        double newScale = scale - scale*e.getWheelRotation()*0.1;
        if(newScale < 15)
        {
            double newOffsetX = (offsetX - e.getX())*newScale/scale + e.getX();
            double newOffsetY = (offsetY - e.getY())*newScale/scale + e.getY();

            dragOffsetX += newOffsetX - offsetX;
            dragOffsetY += newOffsetY - offsetY;

            offsetX = newOffsetX;
            offsetY = newOffsetY;
            scale = newScale;
            repaint();
        }//end if
    }//end mouseWheelMoved

    public void mouseDragged(MouseEvent e) {
        this.offsetX = this.dragOffsetX + e.getX();
        this.offsetY = this.dragOffsetY + e.getY();
        this.repaint();
    }

    public void mousePressed(MouseEvent e) {
        this.dragOffsetX = offsetX - e.getX();
        this.dragOffsetY = offsetY - e.getY();
    }//end mousePressed

    public void mouseReleased(MouseEvent e) {}
    public void mouseEntered(MouseEvent e) {}
    public void mouseExited(MouseEvent e) {}
    public void mouseMoved(MouseEvent e) {}
    public void mouseClicked(MouseEvent e) {}

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Getter and Setter">
    public void setOffsetX(double offsetX) {
        this.offsetX = offsetX;
    }

    public void setOffsetY(double offsetY) {
        this.offsetY = offsetY;
    }

    public void setScale(double scale) {
        this.scale = scale;
    }


    public double getOffsetX() {
        return offsetX;
    }

    public double getOffsetY() {
        return offsetY;
    }

    public double getScale() {
        return scale;
    }


    // </editor-fold>

}//end DynamicCanvasPanel
